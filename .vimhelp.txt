------------------------------------------------------------------------------
插入动作
------------------------------------------------------------------------------
a 在光标后插入
A 行末插入
i I 行首插入
o O 上方/下方插入空白行
s 删除当前字符然后插入
S 删除整行然后插入
------------------------------------------------------------------------------
插入模式下特殊操作
------------------------------------------------------------------------------
ctrl-h 删除一个字符
ctrl-w 删除一个单词
ctrl-u 删除至行首
ctrl-d 删除一个缩进
ctrl-t 插入一个缩进
ctrl-f 右移光标
ctrl-b 左移光标
插入模式下移动：
<S-LEFT> <S-RIGHT>：左移/右移一个单词
------------------------------------------------------------------------------
光标移动命令
------------------------------------------------------------------------------
H   屏幕首行
M   屏幕中部
L   屏幕首行

0 , ^（非空格行首）, $
gg , G , nG
w , W
b , B
e , E , ge(后退)
f{char} , F , t , T
; f/F/t/T的重复
, f/F/t/T的撤销
(): 句子首尾
{}: 段落(以空行为段落间隔)首尾
[[ 上一个函数开头
]] 下一个函数开头
[] 上一个函数末尾
][ 下一个函数末尾
简记：第一个中括号是[则向前跳，是]则向后跳；第二个中括号是[跳开头{，是]跳末尾}

% 跳到下一个对象

m {reg}
` {reg} 或者 '{reg}跳到标记所在行行首

补充：大写的JK功能：
J：连接2行，有可能插入空格
K：查看光标所在单词的help信息（相当实用，配置vimrc时非常方便查找帮助）
------------------------------------------------------------------------------
滚屏
------------------------------------------------------------------------------
翻页：ctrl-f, ctrl-b
半屏：ctrl-d, ctrl-u
滚动一行：ctrl-y, ctrl-e
光标居中、顶部、底部：zt,zz,zb
------------------------------------------------------------------------------
剪切
------------------------------------------------------------------------------
x
dw dW de dE db dB dfx dtx
diw diW
daw daW
d$或D
dd
ndd
dG
------------------------------------------------------------------------------‘
编辑修改
------------------------------------------------------------------------------
cw
ce
cc
C，c$
r
R

A word/iner word: aw, iw
A sentence/inner sentence: as, is
A paragraph/inner paragraph: ap, ip
A tag/iner tag: at, it
Other text objects: ", ', >, ), ], }, `
tag: t,  i.g: cit
全文自动缩进：
gg=G
------------------------------------------------------------------------------
拷贝与粘贴
------------------------------------------------------------------------------
yw
y$
yy
nyy
Y
p
P
+-----+------------------------------------------------------+
| ""  |   无名寄存器，剪切，p专用，dd，p                     |
| "+  |   系统剪贴板，需要编译选项开启，<C-V>或者<C-S-V>     |
| "*  |   X11主剪贴板，可用鼠标中键粘贴，                    |
|     |   在win上等同于系统剪贴板"+，win不区分系统和主剪贴板 |
|     |                                                      |
| "0  |   复制专用寄存器，yy，粘贴用"0p                      |
+-----+------------------------------------------------------+
yy不仅复制覆盖无名寄存器""，还会覆盖专用寄存器"0；
而dd只会覆盖无名寄存器"",
所以，如果只想复制并且中间有剪贴操作的，请不要直接p，而是使用"0p。如：yw dw "0p。
最好的建议操作是使用ve进行粘贴，不要做剪贴操作。
如果有多处需要进行同类修改，建议用cw，然后用.操作，或者用vim-multiple-cursors插件
------------------------------------------------------------------------------
查找与替换
------------------------------------------------------------------------------
*
#
n
N
/string
?string
:%/str1/str2/gc
用单词a快速替换单词b，3种方法：
yw, vep
yiw, viwp
yw, cw, esc, "0p
提示，如果不想删除过程中覆盖寄存器，不要用cw，dw，而是直接ve，然后操作。
------------------------------------------------------------------------------
文本保存与退出命令
------------------------------------------------------------------------------
:q
:q!
:w file
:w! file
:wq，:x
:wq!
ZZ
读入某文件：
:r <filename>
:e 重新加载当前文件:e!放弃修改，强制重载当前文件

打开当前编辑文件的目录
:Explore
:Hexplore
:Nexplore
:Pexplore
:Sexplore
:Texplore
:Vexplore
------------------------------------------------------------------------------
文本对象操作，快速对引号、括号、字符内容修改、删除、复制、选中
------------------------------------------------------------------------------
分别更改这些配对标点符号中的文本内容
ci’、ci”、ci(、ci[、ci{、ci< -

分别删除这些配对标点符号中的文本内容
di’、di”、di(或dib、di[、di{或diB、di<

分别复制这些配对标点符号中的文本内容
yi’、yi”、yi(、yi[、yi{、yi<

分别选中这些配对标点符号中的文本内容
vi’、vi”、vi(、vi[、vi{、vi<
------------------------------------------------------------------------------
buffer 的使用
------------------------------------------------------------------------------
:b [n] 跳到第n个buffer
:bd n 删除buffer
:ls或者:buffers查看buffers
buf转成tab：
:bufdo tab split
------------------------------------------------------------------------------
------------------------------------------------------------------------------
tab 标签页的使用
------------------------------------------------------------------------------
:Te 打开tab浏览器
:tabn tabe [filename]
:tabnext :tabn gt
:tabNext :tabp gT
:tabs 查看标签状态
:tabm {n}        切换到n页
:tabc 关闭标签

:tabedit file 在新标签中打开文件file
:tab split file 在新标签中打开文件file
:tabp 切换到前一个标签
:tabn 切换到后一个标签
:tabc 关闭当前标签
:tabo 关闭其他标签
gt 到下一个tab
gT 到上一个tab

{i} gt   – i是数字，跳到指定页，比如：5 gt 就是到第5页
------------------------------------------------------------------------------
ap aw at的用法，待续
------------------------------------------------------------------------------
------------------------------------------------------------------------------
分屏
------------------------------------------------------------------------------
垂直分屏打开文件：vim -On file1 file2 ...
水平打开：vim -on file1 file2 ...
关屏：Ctrl+W c 或者Ctrl+W q，无窗口则退出

上下分割当前打开的文件。
Ctrl+W s

水平分割，并打开一个新的文件。
:sp filename

垂直分割当前打开的文件，新窗口出现在右方。
Ctrl+W v

左右分割，并打开一个新的文件。
:vsp filename

------------------------------------------------------------------------------
移动窗口，用大写
------------------------------------------------------------------------------
向右移动
Ctrl+W L
向左移动
Ctrl+W H
向上移动
Ctrl+W K
向下移动
Ctrl+W J

下面是改变尺寸的一些操作，主要是高度，对于宽度你可以使用[Ctrl+W <]
或是[Ctrl+W >]，但这可能需要最新的版本才支持。

让所有的屏都有一样的高度。
Ctrl+W =
增加高度。
Ctrl+W +
减少高度。
Ctrl+W -

ctrl-W t 跳转到最顶上的窗口
ctrl-W b 跳转到最底下的窗口
------------------------------------------------------------------------------
跳转
------------------------------------------------------------------------------
A "jump" is one of the following commands: "'", "`", "G", "/", "?", "n",
"N", "%", "(", ")", "[[", "]]", "{", "}", ":s", ":tag", "L", "M", "H" and
the commands that start editing a new file.
<C-I><C-O>来回跳转
------------------------------------------------------------------------------
折叠
------------------------------------------------------------------------------
zn zN 启用/禁用折叠
zo zO zR 打开折叠
zc zC zM 关闭折叠
za zA 交替折叠状态
zd zD 删除光标下的折叠符号
zE 删除所有折叠
zf{motion} 根据移动范围进行折叠，zfa( 手动折叠()之间的内容
:[range]fold 指定范围折叠
zr zm 打开/关闭折叠，会影响foldlevel
zj zk 移动光标到上一个/下一个折叠处
------------------------------------------------------------------------------
g开始的命令
------------------------------------------------------------------------------
与g相关 vim ref 370页，2.4 ’g’ 开始的令：
ga 显示字符编码
gb：netgw-gb切换到书签目录
gc 无
gd 移动到函数声明就像[[
ge e的反向操作，移动到上一个单词末尾
gf 编辑光标所指向的文件
gg 移动到文件开头
gh 开始选择模式
gi 在当前缓冲区最近一次插入模式停止的位置继续插入
gI 在第一列插入文本
gj 向下
gk 上
gl 无
gm 和 "g0" 类似，但 (尽可能) 向右移到屏幕显示宽度的中间位置。
gn 类似n，继续搜索匹配并选中
gN 类似于 |gn| 但反向搜索，就像 `N` 那样。
go {n}go，移动到buffer的第n个字节处，默认为文件开头, go = gg
gp 粘贴，与p区别：粘贴后光标移到末尾/下一行
gq 格式化直到到移动的位置，与=有差异，具体查看:h gq
gr 替换虚拟字符，比如制表符
gs {n}gs等同于:sleep{n} 休眠x秒
gt {n}gt跳转tab
gu 转换为小写字母直到到移动位置
gv 返回上一次选中状态
gw 格式化直到到移动位置，与=有差异，具体查看:h gq
gx netw-gx
gy 无
gz 无

以下命令均可以通过:h CTRL-* 查询
<CTRL-A>: +1
<CTRL-B>: 上翻N页
<CTRL-C>: 退出插入模式
<CTRL-D>: 屏幕向下翻滚N行,默认翻滚半屏
<CTRL-E>: 下滚N行
<CTRL-F>: 下翻N页
<CTRL-G>: 打印文件名、路径，总行数
<CTRL-H>: 向左
<CTRL-I>: 向前跳转mark（新的）
<CTRL-J>: 下，等同于j
<CTRL-K>: 无用
<CTRL-L>: 重画屏幕
<CTRL-M>: 等同于<CR>，回车功能，跳到下一行行首
<CTRL-N>: 下，等同于j
<CTRL-O>: 向后跳转mark（旧的）
<CTRL-P>: 上，等同于k
<CTRL-Q>: 如果是WINDOWS系统:替代ctrlv粘贴，unix终端是解锁
<CTRL-R>: 重复
<CTRL-S>: 锁定
<CTRL-T>: 跳转到标签tag，需要ctags支持
<CTRL-U>: 上滚N行，默认半屏
<CTRL-V>: 列模式，插入模式下插入控制字符
<CTRL-W>: 窗口
<CTRL-X>: -1
<CTRL-Y>: 上滚N行
<CTRL-Z>: 挂起vim


其他：

在可视模式下重复操作：
vnoremap . :normal .<cr>

:.!ls /path/to/file
:'<,'>!sort -rnu
:w !sh

回到上一次选中区域：
gv

打印文件名、路径：
CTRL-G （相对路径）
1 CTRL-G（完整路径）
g CTRL-G 统计字数

关于切换窗口快捷键
" vim windows{
" nnoremap <C-J> <C-W>j
" nnoremap <C-K> <C-W>k
" nnoremap <C-H> <C-W>h
" nnoremap <C-L> <C-W>l
" }windows
------------------------------------------------------------------------------
与JKHL相关的快捷键：
K: 调用keyprog指定的程序，默认为help：搜索当前单词的帮助信息
+----------+----------+----------------------------------------------------------------------------+
|          | 普通模式 | 插入模式                                                                   |
+----------+----------+----------------------------------------------------------------------------+
|   <C-J>  | 同j      | 回车                                                                       |
|   <C-K>  | 无功能   | 输入键码，相当于ctrl-v                                                     |
|   <C-H>  | 同h      | 删除字符，相当于退格键                                                     |
|   <C-L>  | 重绘屏幕 | 当set insertmode后，插入模式成为常态模式，                                 |
|          |          | 插入模式下esc不可用(因为已经是最顶层的模式了)，此时按下ctrl-l会进入普通模式|
|   <C-W>  | 窗口命令 | 删除一个单词                                                               |
+----------+----------+----------------------------------------------------------------------------+

设置当前目录：
echo expand("%:h")
切换工作目录为文件所在文件夹：
:cd <C-R>=expand("%:h")
实际上用快捷键映射更方便：
nnoremap <silent> <leader>.  :cd %:p:h<CR>
vim自动进入打开文件所在目录
au   BufEnter *   execute ":lcd " . expand("%:p:h")

一个操作例子：
------------------------------------------------------------------------------
Console.WriteLine
{
       Bob
       Sarah
       Sam
       Mick
       Jill
}
{
       Bob
       Sarah
       Sam
       Mick
       Jill
}
------------------------------------------------------------------------------

" vim:tw=78:ts=4:sw=4:sts=4 et fdm=marker:

重复上一次操作 .
重复上一次命令 @:

列表外缓冲区：
即使用 ":bdelete" 命令删除了缓冲区以后，Vim 依然记得它。这个缓冲区实际
上成了 "列表外" 缓冲区，它不再出现在 ":buffers" 命令所报告的列表中。不
过 ":buffers!" 命令仍会列出 "列表外" 缓冲区 (没错，Vim 无所不能)。要让
Vim 彻底忘记一个缓冲区，用 ":bwipe" 命令。另见 ’buflisted’ 选项。

寄存器：
宏和复制粘贴的寄存器是共用的

重定向log：
redir! > lookuplog.log
:messages
关闭vim

注意
需要关闭vim后，log文件才会更新
------------------------------------------------------------------------------
减少按键的方法
)      跳到下一句，以句号为标记
<C-O>
gJ     连接下一行，去除空白
[N]:   对N行内容进行操作，命令行会显示： :.,.+5wq!
@.     执行寄存器.中的命令
可视模式下"= 表达式寄存器
------------------------------------------------------------------------------
特殊编辑：
------------------------------------------------------------------------------
ga 查看十六进制
输入编码插入字符：
Ascii:
<C-v>{code}
Unicode:
<C-v>u{code}

交换两个单词：
nnoremap <silent> <leader>sw :s/\(\%#\w\+\)\(\W\+\)\(\w\+\)/\3\2\1/<cr><c-o>
_是黑洞寄存器，"_yiw无意义，可删掉，\%#是匹配当前光标位置
------------------------------------------------------------------------------
